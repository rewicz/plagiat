void bridgeUtil(int u, vector<int> adj[], vector<bool>& visited, vector<int>& disc, vector<int>& low, vector<int>& parent) {
    visited[u] = true;
    disc[u] = low[u] = ++time;
    for (int i = 0; i < adj[u].size(); ++i) {
        int v = adj[u][i];
        if (!visited[v]) {
            parent[v] = u;
            bridgeUtil(v, adj, visited, disc, low, parent);
            low[u] = min(low[u], low[v]);
            if (low[v] > disc[u])
                cout << u << " " << v << endl;
        }
        else if (v != parent[u])
            low[u] = min(low[u], disc[v]);
    }
}

void bridge(int V, vector<int> adj[]) {
    vector<bool> visited(V, false);
    vector<int> disc(V), low(V), parent(V, -1);

    for (int i = 0; i < V; i++)
        if (!visited[i])
            bridgeUtil(i, adj, visited, disc, low, parent);
}
